#Data Cleaning Scripts

import pandas as pd

# Loading the ratings data
ratings = pd.read_csv('path_to_ratings.csv')

# Converting timestamp to a human-readable date
ratings['date'] = pd.to_datetime(ratings['timestamp'], unit='s')

# Dropping the original timestamp column
ratings.drop('timestamp', axis=1, inplace=True)

# Removing any duplicates
ratings.drop_duplicates(subset=['userId', 'movieId'], keep='first', inplace=True)

# Ensuring ratings are within the valid range
ratings = ratings[(ratings['rating'] >= 0.5) & (ratings['rating'] <= 5)]

# Saving the cleaned data
ratings.to_csv('cleaned_ratings.csv', index=False)

#For Movies

import pandas as pd

# Loading the movies data
movies = pd.read_csv('/mnt/data/movies.csv')

# Extracting year from the title and create a new column
movies['year'] = movies['title'].str.extract(r'\((\d{4})\)')
movies['title'] = movies['title'].str.replace(r'(\s*\(\d{4}\))', '').str.strip()

# Splitting genres into a list
movies['genres'] = movies['genres'].apply(lambda x: x.split('|') if x != '(no genres listed)' else [])

# Checking for and handle missing data
print(movies.isnull().sum())  # This will print the count of missing values in each column

# If there are any missing years or other important fields, we will fill them or drop the rows:
# movies.dropna(subset=['year'], inplace=True)  # Example to drop rows where 'year' is NaN

# Save the cleaned data
movies.to_csv('/mnt/data/cleaned_movies.csv', index=False)


